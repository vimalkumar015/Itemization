
import java.awt.event.KeyEvent;
import java.awt.print.PrinterException;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.MessageFormat;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JTable;

import net.proteanit.sql.DbUtils;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.JComboBox;
import javax.swing.DefaultComboBoxModel;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author NirmalGds
 */
public class customreportresult extends javax.swing.JFrame {
    static Date fromdate;
    static Date todate;
    String temp;
    MessageFormat header;

    /**
     * Creates new form customreportresult
     */
    public customreportresult() {
    	setIconImage(Toolkit.getDefaultToolkit().getImage(customreportresult.class.getResource("/images/itemization_logo.png")));
    	setTitle("ITEMIZATION - Custom Report");
    	getContentPane().setBackground(new Color(176, 224, 230));
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jScrollPane1.setEnabled(false);
        jTable1 = new javax.swing.JTable();
        jTable1.setEnabled(false);
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setText("From");

        jComboBox1.setModel(new DefaultComboBoxModel(new String[] {"None", "In Stock", "Sold Out"}));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jComboBox1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBox1KeyPressed(evt);
            }
        });

        jButton1.setText("Print");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jButton1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton1KeyPressed(evt);
            }
        });

        jButton2.setText("Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jButton2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton2KeyPressed(evt);
            }
        });
        
        lblNewLabel = new JLabel("Type");
        
        comboBox = new JComboBox();
        comboBox.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		jComboBoxActionPerformed(evt);
        	}
        });
        comboBox.setModel(new DefaultComboBoxModel(new String[] {"", "All", "Gold", "Silver", "Covering"}));
        
        lblTotalWeight = new JLabel("Total Weight");
        
        textField = new JTextField();
        textField.setEditable(false);
        textField.setColumns(10);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createSequentialGroup()
        					.addGap(167)
        					.addComponent(jButton1)
        					.addGap(193)
        					.addComponent(jButton2)
        					.addGap(82)
        					.addComponent(lblTotalWeight)
        					.addGap(31)
        					.addComponent(textField, GroupLayout.PREFERRED_SIZE, 108, GroupLayout.PREFERRED_SIZE))
        				.addGroup(layout.createSequentialGroup()
        					.addContainerGap()
        					.addComponent(jLabel1)
        					.addGap(53)
        					.addComponent(jComboBox1, GroupLayout.PREFERRED_SIZE, 107, GroupLayout.PREFERRED_SIZE)
        					.addGap(58)
        					.addComponent(lblNewLabel)
        					.addGap(38)
        					.addComponent(comboBox, GroupLayout.PREFERRED_SIZE, 92, GroupLayout.PREFERRED_SIZE))
        				.addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 912, GroupLayout.PREFERRED_SIZE))
        			.addContainerGap())
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addGap(16)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jLabel1)
        				.addComponent(jComboBox1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(lblNewLabel)
        				.addComponent(comboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addGap(18)
        			.addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jButton1)
        				.addComponent(jButton2)
        				.addComponent(lblTotalWeight)
        				.addComponent(textField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addContainerGap())
        );
        getContentPane().setLayout(layout);

        pack();
    }// </editor-fold>                        
    private void jComboBoxActionPerformed(java.awt.event.ActionEvent evt)
    {
    	
    	if(jComboBox1.getSelectedItem().toString() == "In Stock" && comboBox.getSelectedItem() == "All")
    	{
    		try
    		{
    			Class.forName("com.mysql.jdbc.Driver");
    			Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/gdlashmi?useSSL=false","root","");
    			PreparedStatement pst  = conn.prepareStatement("Select `id` as ID, `product_name` AS PRODUCT, `Purity` AS PURITY, `location` AS LOCATION, `gross_weight` AS `GROSS WEIGHT`, date(`date&time`) AS `CREATED ON` From `stocklist` WHERE date(`date&time`) between ? and ? and flag = 1");
    			PreparedStatement pst1 = conn.prepareStatement("Select sum(`gross_weight`) From `stocklist` WHERE date(`date&time`) between ? and ? and flag = 1 ");
    			pst.setDate(1, fromdate);
    			pst.setDate(2, todate);
    			pst1.setDate(1, fromdate);
    			pst1.setDate(2, todate);
    			ResultSet rs = pst.executeQuery();
    			ResultSet rs1 = pst1.executeQuery();
    			if(rs!=null)
    			{
    				jTable1.setModel(DbUtils.resultSetToTableModel(rs));
    			}
    			if(rs1.next())
    			{
    				textField.setText(String.valueOf(rs1.getDouble(1)));
    			}
    		}
    		catch(Exception e)
    		{
    			e.printStackTrace();
    		}
    	}else if(jComboBox1.getSelectedItem().toString() == "In Stock" && comboBox.getSelectedItem() == "Gold")
    	{
    		try
    		{
    			Class.forName("com.mysql.jdbc.Driver");
    			Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/gdlashmi?useSSL=false","root","");
    			PreparedStatement pst  = conn.prepareStatement("Select `id` as ID, `product_name` AS PRODUCT, `Purity` AS PURITY, `location` AS LOCATION, `gross_weight` AS `GROSS WEIGHT`, date(`date&time`) AS `CREATED ON` From `stocklist` WHERE date(`date&time`) between ? and ? and flag = 1 and (Purity = \"Regular\" OR Purity = \"KDM\" )");
    			PreparedStatement pst1 = conn.prepareStatement("Select sum(`gross_weight`) From `stocklist` WHERE date(`date&time`) between ? and ? and flag = 1 and (Purity = \"Regular\" OR Purity = \"KDM\")");
    			pst1.setDate(1, fromdate);
    			pst1.setDate(2, todate);
    			pst.setDate(1, fromdate);
    			pst.setDate(2, todate);
    			ResultSet rs = pst.executeQuery();
    			ResultSet rs1 = pst1.executeQuery();
    			if(rs!=null)
    			{
    				jTable1.setModel(DbUtils.resultSetToTableModel(rs));
    			}
    			if(rs1.next())
    			{
    				textField.setText(String.valueOf(rs1.getDouble(1)));
    			}
    		}
    		catch(Exception e)
    		{
    			e.printStackTrace();
    		}
    	}else if(jComboBox1.getSelectedItem().toString() == "In Stock" && comboBox.getSelectedItem() == "Silver")
    	{
    		try
    		{
    			Class.forName("com.mysql.jdbc.Driver");
    			Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/gdlashmi?useSSL=false","root","");
    			PreparedStatement pst  = conn.prepareStatement("Select `id` as ID, `product_name` AS PRODUCT, `Purity` AS PURITY, `location` AS LOCATION, `gross_weight` AS `GROSS WEIGHT`, date(`date&time`) AS `CREATED ON` From `stocklist` WHERE date(`date&time`) between ? and ? and flag = 1 and (Purity = \"Silver\" OR Purity = \"92M-Silver\" )");
    			PreparedStatement pst1 = conn.prepareStatement("Select sum(`gross_weight`) From `stocklist` WHERE date(`date&time`) between ? and ? and flag = 1 and (Purity = \"Silver\" OR Purity = \"92M-Silver\")");
    			pst1.setDate(1, fromdate);
    			pst1.setDate(2, todate);
    			pst.setDate(1, fromdate);
    			pst.setDate(2, todate);
    			ResultSet rs = pst.executeQuery();
    			ResultSet rs1 = pst1.executeQuery();
    			if(rs!=null)
    			{
    				jTable1.setModel(DbUtils.resultSetToTableModel(rs));
    			}
    			if(rs1.next())
    			{
    				textField.setText(String.valueOf(rs1.getDouble(1)));
    			}
    		}
    		catch(Exception e)
    		{
    			e.printStackTrace();
    		}
    	}else if(jComboBox1.getSelectedItem().toString() == "In Stock" && comboBox.getSelectedItem() == "Covering")
    	{
    		try
    		{
    			Class.forName("com.mysql.jdbc.Driver");
    			Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/gdlashmi?useSSL=false","root","");
    			PreparedStatement pst  = conn.prepareStatement("Select `id` as ID, `product_name` AS PRODUCT, `Purity` AS PURITY, `location` AS LOCATION, `gross_weight` AS `GROSS WEIGHT`, date(`date&time`) AS `CREATED ON` From `stocklist` WHERE date(`date&time`) between ? and ? and flag = 1 and Purity = \"Covering\" ");
    			PreparedStatement pst1 = conn.prepareStatement("Select sum(`gross_weight`) From `stocklist` WHERE date(`date&time`) between ? and ? and flag = 1 and Purity = \"Covering\"");
    			pst1.setDate(1, fromdate);
    			pst1.setDate(2, todate);
    			pst.setDate(1, fromdate);
    			pst.setDate(2, todate);
    			ResultSet rs = pst.executeQuery();
    			ResultSet rs1 = pst1.executeQuery();
    			if(rs!=null)
    			{
    				jTable1.setModel(DbUtils.resultSetToTableModel(rs));
    			}
    			if(rs1.next())
    			{
    				textField.setText(String.valueOf(rs1.getDouble(1)));
    			}
    		}
    		catch(Exception e)
    		{
    			e.printStackTrace();
    		}
    	}else if(jComboBox1.getSelectedItem().toString() == "Sold Out" && comboBox.getSelectedItem() == "Silver")
    	{
    		try
    		{
    			Class.forName("com.mysql.jdbc.Driver");
    			Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/gdlashmi?useSSL=false","root","");
    			PreparedStatement pst  = conn.prepareStatement("SELECT stocklist.id AS `ID`, stocklist.product_name AS `Product Name`, stocklist.Purity AS `Purity`, stocklist.location AS `Location`, stocklist.gross_weight AS `Gross Weight`, date(stocklist.`date&time`) AS `Created On`, date(soldoutdate.`sold date`) AS `Sold On` FROM `stocklist` JOIN `soldoutdate` WHERE stocklist.id = soldoutdate.id AND flag = 0 AND date(soldoutdate.`sold date`) BETWEEN ? AND ? AND (stocklist.Purity = \"92M-Silver\" OR stocklist.Purity = \"Silver\") ORDER BY date(soldoutdate.`sold date`)");
    			PreparedStatement pst1 = conn.prepareStatement("select SUM(stocklist.`gross_weight`) FROM stocklist JOIN soldoutdate WHERE stocklist.id = soldoutdate.id AND date(soldoutdate.`sold date`) BETWEEN ? AND ? AND stocklist.flag = 0 and (Purity = \"Silver\" OR Purity = \"92M-Silver\" )");
    			pst1.setDate(1, fromdate);
    			pst1.setDate(2, todate);
    			pst.setDate(1, fromdate);
    			pst.setDate(2, todate);
    			ResultSet rs = pst.executeQuery();
    			ResultSet rs1 = pst1.executeQuery();
    			if(rs1.next())
    			{
    				textField.setText(String.valueOf(rs1.getDouble(1)));
    			}
    			if(rs!=null)
    			{
    				jTable1.setModel(DbUtils.resultSetToTableModel(rs));
    			}
    		}
    		catch(Exception e)
    		{
    			e.printStackTrace();
    		}
    	}else if(jComboBox1.getSelectedItem().toString() == "Sold Out" && comboBox.getSelectedItem() == "Gold")
    	{
    		try
    		{
    			Class.forName("com.mysql.jdbc.Driver");
    			Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/gdlashmi?useSSL=false","root","");
    			PreparedStatement pst  = conn.prepareStatement("SELECT stocklist.id AS `ID`, stocklist.product_name AS `Product Name`, stocklist.Purity AS `Purity`, stocklist.location AS `Location`, stocklist.gross_weight AS `Gross Weight`, date(stocklist.`date&time`) AS `Created On`, date(soldoutdate.`sold date`) AS `Sold On` FROM `stocklist` JOIN `soldoutdate` WHERE stocklist.id = soldoutdate.id AND flag = 0 AND date(soldoutdate.`sold date`) BETWEEN ? AND ? AND (stocklist.Purity = \"KDM\" OR stocklist.Purity = \"Regular\") ORDER BY date(soldoutdate.`sold date`)");
    			PreparedStatement pst1 = conn.prepareStatement("select SUM(stocklist.`gross_weight`) FROM stocklist JOIN soldoutdate WHERE stocklist.id = soldoutdate.id AND date(soldoutdate.`sold date`) BETWEEN ? AND ? AND stocklist.flag = 0 and (Purity = \"Regular\" OR Purity = \"KDM\" )");
    			pst1.setDate(1, fromdate);
    			pst1.setDate(2, todate);
    			pst.setDate(1, fromdate);
    			pst.setDate(2, todate);
    			ResultSet rs = pst.executeQuery();
    			ResultSet rs1 = pst1.executeQuery();
    			if(rs1.next())
    			{
    				textField.setText(String.valueOf(rs1.getDouble(1)));
    			}
    			if(rs!=null)
    			{
    				jTable1.setModel(DbUtils.resultSetToTableModel(rs));
    			}
    		}
    		catch(Exception e)
    		{
    			e.printStackTrace();
    		}
    	}else if(jComboBox1.getSelectedItem().toString() == "Sold Out" && comboBox.getSelectedItem() == "All")
    	{
    		try
    		{
    			Class.forName("com.mysql.jdbc.Driver");
    			Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/gdlashmi?useSSL=false","root","");
    			PreparedStatement pst  = conn.prepareStatement("SELECT stocklist.id AS `ID`, stocklist.product_name AS `Product Name`, stocklist.Purity AS `Purity`, stocklist.location AS `Location`, stocklist.gross_weight AS `Gross Weight`, date(stocklist.`date&time`) AS `Created On`, date(soldoutdate.`sold date`) AS `Sold On` FROM `stocklist` JOIN `soldoutdate` WHERE stocklist.id = soldoutdate.id AND flag = 0 AND date(soldoutdate.`sold date`) BETWEEN ? AND ? ORDER BY date(soldoutdate.`sold date`)");
    			PreparedStatement pst1 = conn.prepareStatement("select SUM(stocklist.`gross_weight`) FROM stocklist JOIN soldoutdate WHERE stocklist.id = soldoutdate.id AND date(soldoutdate.`sold date`) BETWEEN ? AND ? AND stocklist.flag = 0");
    			pst1.setDate(1, fromdate);
    			pst1.setDate(2, todate);
    			pst.setDate(1, fromdate);
    			pst.setDate(2, todate);
    			ResultSet rs = pst.executeQuery();
    			ResultSet rs1 = pst1.executeQuery();
    			if(rs1.next())
    			{
    				textField.setText(String.valueOf(rs1.getDouble(1)));
    			}
    			if(rs!=null)
    			{
    				jTable1.setModel(DbUtils.resultSetToTableModel(rs));
    			}
    		}
    		catch(Exception e)
    		{
    			e.printStackTrace();
    		}
    	}else if(jComboBox1.getSelectedItem().toString() == "Sold Out" && comboBox.getSelectedItem() == "Covering")
    	{
    		try
    		{
    			Class.forName("com.mysql.jdbc.Driver");
    			Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/gdlashmi?useSSL=false","root","");
    			PreparedStatement pst  = conn.prepareStatement("Select `id` as ID, `product_name` AS PRODUCT, `Purity` AS PURITY, `location` AS LOCATION, `gross_weight` AS `GROSS WEIGHT`, date(`date&time`) AS `CREATED ON` From `stocklist` WHERE date(`date&time`) between ? and ? and flag = 1 and Purity = \"Covering\" ");
    			PreparedStatement pst1 = conn.prepareStatement("Select sum(`gross_weight`) From `stocklist` WHERE date(`date&time`) between ? and ? and flag = 1 and Purity = \"Covering\"");
    			pst1.setDate(1, fromdate);
    			pst1.setDate(2, todate);
    			pst.setDate(1, fromdate);
    			pst.setDate(2, todate);
    			ResultSet rs = pst.executeQuery();
    			ResultSet rs1 = pst1.executeQuery();
    			if(rs!=null)
    			{
    				jTable1.setModel(DbUtils.resultSetToTableModel(rs));
    			}
    			if(rs1.next())
    			{
    				textField.setText(String.valueOf(rs1.getDouble(1)));
    			}
    		}
    		catch(Exception e)
    		{
    			e.printStackTrace();
    		}
    	}
    }
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {                                           
    	if(jComboBox1.getSelectedItem().toString() == "In Stock" && comboBox.getSelectedItem() == "All")
    	{
    		try
    		{
    			Class.forName("com.mysql.jdbc.Driver");
    			Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/gdlashmi?useSSL=false","root","");
    			PreparedStatement pst  = conn.prepareStatement("Select `id` as ID, `product_name` AS PRODUCT, `Purity` AS PURITY, `location` AS LOCATION, `gross_weight` AS `GROSS WEIGHT`, date(`date&time`) AS `CREATED ON` From `stocklist` WHERE date(`date&time`) between ? and ? and flag = 1");
    			PreparedStatement pst1 = conn.prepareStatement("Select sum(`gross_weight`) From `stocklist` WHERE date(`date&time`) between ? and ? and flag = 1 ");
    			pst.setDate(1, fromdate);
    			pst.setDate(2, todate);
    			pst1.setDate(1, fromdate);
    			pst1.setDate(2, todate);
    			ResultSet rs = pst.executeQuery();
    			ResultSet rs1 = pst1.executeQuery();
    			if(rs!=null)
    			{
    				jTable1.setModel(DbUtils.resultSetToTableModel(rs));
    			}
    			if(rs1.next())
    			{
    				textField.setText(String.valueOf(rs1.getDouble(1)));
    			}
    		}
    		catch(Exception e)
    		{
    			e.printStackTrace();
    		}
    	}else if(jComboBox1.getSelectedItem().toString() == "In Stock" && comboBox.getSelectedItem() == "Gold")
    	{
    		try
    		{
    			Class.forName("com.mysql.jdbc.Driver");
    			Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/gdlashmi?useSSL=false","root","");
    			PreparedStatement pst  = conn.prepareStatement("Select `id` as ID, `product_name` AS PRODUCT, `Purity` AS PURITY, `location` AS LOCATION, `gross_weight` AS `GROSS WEIGHT`, date(`date&time`) AS `CREATED ON` From `stocklist` WHERE date(`date&time`) between ? and ? and flag = 1 and (Purity = \"Regular\" OR Purity = \"KDM\" )");
    			PreparedStatement pst1 = conn.prepareStatement("Select sum(`gross_weight`) From `stocklist` WHERE date(`date&time`) between ? and ? and flag = 1 and (Purity = \"Regular\" OR Purity = \"KDM\")");
    			pst1.setDate(1, fromdate);
    			pst1.setDate(2, todate);
    			pst.setDate(1, fromdate);
    			pst.setDate(2, todate);
    			ResultSet rs = pst.executeQuery();
    			ResultSet rs1 = pst1.executeQuery();
    			if(rs!=null)
    			{
    				jTable1.setModel(DbUtils.resultSetToTableModel(rs));
    			}
    			if(rs1.next())
    			{
    				textField.setText(String.valueOf(rs1.getDouble(1)));
    			}
    		}
    		catch(Exception e)
    		{
    			e.printStackTrace();
    		}
    	}else if(jComboBox1.getSelectedItem().toString() == "In Stock" && comboBox.getSelectedItem() == "Silver")
    	{
    		try
    		{
    			Class.forName("com.mysql.jdbc.Driver");
    			Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/gdlashmi?useSSL=false","root","");
    			PreparedStatement pst  = conn.prepareStatement("Select `id` as ID, `product_name` AS PRODUCT, `Purity` AS PURITY, `location` AS LOCATION, `gross_weight` AS `GROSS WEIGHT`, date(`date&time`) AS `CREATED ON` From `stocklist` WHERE date(`date&time`) between ? and ? and flag = 1 and (Purity = \"Silver\" OR Purity = \"92M-Silver\" )");
    			PreparedStatement pst1 = conn.prepareStatement("Select sum(`gross_weight`) From `stocklist` WHERE date(`date&time`) between ? and ? and flag = 1 and (Purity = \"Silver\" OR Purity = \"92M-Silver\")");
    			pst1.setDate(1, fromdate);
    			pst1.setDate(2, todate);
    			pst.setDate(1, fromdate);
    			pst.setDate(2, todate);
    			ResultSet rs = pst.executeQuery();
    			ResultSet rs1 = pst1.executeQuery();
    			if(rs!=null)
    			{
    				jTable1.setModel(DbUtils.resultSetToTableModel(rs));
    			}
    			if(rs1.next())
    			{
    				textField.setText(String.valueOf(rs1.getDouble(1)));
    			}
    		}
    		catch(Exception e)
    		{
    			e.printStackTrace();
    		}
    	}else if(jComboBox1.getSelectedItem().toString() == "Sold Out" && comboBox.getSelectedItem() == "Silver")
    	{
    		try
    		{
    			Class.forName("com.mysql.jdbc.Driver");
    			Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/gdlashmi?useSSL=false","root","");
    			PreparedStatement pst  = conn.prepareStatement("SELECT stocklist.id AS `ID`, stocklist.product_name AS `Product Name`, stocklist.Purity AS `Purity`, stocklist.location AS `Location`, stocklist.gross_weight AS `Gross Weight`, date(stocklist.`date&time`) AS `Created On`, date(soldoutdate.`sold date`) AS `Sold On` FROM `stocklist` JOIN `soldoutdate` WHERE stocklist.id = soldoutdate.id AND flag = 0 AND date(soldoutdate.`sold date`) BETWEEN ? AND ? AND (stocklist.Purity = \"92M-Silver\" OR stocklist.Purity = \"Silver\") ORDER BY date(soldoutdate.`sold date`)");
    			PreparedStatement pst1 = conn.prepareStatement("select SUM(stocklist.`gross_weight`) FROM stocklist JOIN soldoutdate WHERE stocklist.id = soldoutdate.id AND date(soldoutdate.`sold date`) BETWEEN ? AND ? AND stocklist.flag = 0 and (Purity = \"Silver\" OR Purity = \"92M-Silver\" )");
    			pst1.setDate(1, fromdate);
    			pst1.setDate(2, todate);
    			pst.setDate(1, fromdate);
    			pst.setDate(2, todate);
    			ResultSet rs = pst.executeQuery();
    			ResultSet rs1 = pst1.executeQuery();
    			if(rs1.next())
    			{
    				textField.setText(String.valueOf(rs1.getDouble(1)));
    			}
    			if(rs!=null)
    			{
    				jTable1.setModel(DbUtils.resultSetToTableModel(rs));
    			}
    		}
    		catch(Exception e)
    		{
    			e.printStackTrace();
    		}
    	}else if(jComboBox1.getSelectedItem().toString() == "Sold Out" && comboBox.getSelectedItem() == "Gold")
    	{
    		try
    		{
    			Class.forName("com.mysql.jdbc.Driver");
    			Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/gdlashmi?useSSL=false","root","");
    			PreparedStatement pst  = conn.prepareStatement("SELECT stocklist.id AS `ID`, stocklist.product_name AS `Product Name`, stocklist.Purity AS `Purity`, stocklist.location AS `Location`, stocklist.gross_weight AS `Gross Weight`, date(stocklist.`date&time`) AS `Created On`, date(soldoutdate.`sold date`) AS `Sold On` FROM `stocklist` JOIN `soldoutdate` WHERE stocklist.id = soldoutdate.id AND flag = 0 AND date(soldoutdate.`sold date`) BETWEEN ? AND ? AND (stocklist.Purity = \"KDM\" OR stocklist.Purity = \"Regular\") ORDER BY date(soldoutdate.`sold date`)");
    			PreparedStatement pst1 = conn.prepareStatement("select SUM(stocklist.`gross_weight`) FROM stocklist JOIN soldoutdate WHERE stocklist.id = soldoutdate.id AND date(soldoutdate.`sold date`) BETWEEN ? AND ? AND stocklist.flag = 0 and (Purity = \"Regular\" OR Purity = \"KDM\" )");
    			pst1.setDate(1, fromdate);
    			pst1.setDate(2, todate);
    			pst.setDate(1, fromdate);
    			pst.setDate(2, todate);
    			ResultSet rs = pst.executeQuery();
    			ResultSet rs1 = pst1.executeQuery();
    			if(rs1.next())
    			{
    				textField.setText(String.valueOf(rs1.getDouble(1)));
    			}
    			if(rs!=null)
    			{
    				jTable1.setModel(DbUtils.resultSetToTableModel(rs));
    			}
    		}
    		catch(Exception e)
    		{
    			e.printStackTrace();
    		}
    	}else if(jComboBox1.getSelectedItem().toString() == "Sold Out" && comboBox.getSelectedItem() == "All")
    	{
    		try
    		{
    			Class.forName("com.mysql.jdbc.Driver");
    			Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/gdlashmi?useSSL=false","root","");
    			PreparedStatement pst  = conn.prepareStatement("SELECT stocklist.id AS `ID`, stocklist.product_name AS `Product Name`, stocklist.Purity AS `Purity`, stocklist.location AS `Location`, stocklist.gross_weight AS `Gross Weight`, date(stocklist.`date&time`) AS `Created On`, date(soldoutdate.`sold date`) AS `Sold On` FROM `stocklist` JOIN `soldoutdate` WHERE stocklist.id = soldoutdate.id AND flag = 0 AND date(soldoutdate.`sold date`) BETWEEN ? AND ? ORDER BY date(soldoutdate.`sold date`)");
    			PreparedStatement pst1 = conn.prepareStatement("select SUM(stocklist.`gross_weight`) FROM stocklist JOIN soldoutdate WHERE stocklist.id = soldoutdate.id AND date(soldoutdate.`sold date`) BETWEEN ? AND ? AND stocklist.flag = 0");
    			pst1.setDate(1, fromdate);
    			pst1.setDate(2, todate);
    			pst.setDate(1, fromdate);
    			pst.setDate(2, todate);
    			ResultSet rs = pst.executeQuery();
    			ResultSet rs1 = pst1.executeQuery();
    			if(rs1.next())
    			{
    				textField.setText(String.valueOf(rs1.getDouble(1)));
    			}
    			if(rs!=null)
    			{
    				jTable1.setModel(DbUtils.resultSetToTableModel(rs));
    			}
    		}
    		catch(Exception e)
    		{
    			e.printStackTrace();
    		}
    	}
    }                                          

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
    	if(temp == "In Stock")
        {
         header = new MessageFormat("Custom Transaction Report of In Stock List From "+fromdate+" To "+todate  );
        }
        else
        {
         header = new MessageFormat("Custom Transaction Report of Sold Out List From "+fromdate+" To "+todate);   
        }
             MessageFormat footer = new MessageFormat("Page{0,number,integer}");
         try {
             jTable1.print(JTable.PrintMode.FIT_WIDTH, header, footer);
         } catch (PrinterException ex) {
             Logger.getLogger(instocklist.class.getName()).log(Level.SEVERE, null, ex);
         }
    }                                        

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        customreport.main(null);
        this.dispose();
    }                                        

    private void jComboBox1KeyPressed(java.awt.event.KeyEvent evt) {                                      
        if(evt.getKeyCode() == KeyEvent.VK_BACK_SPACE)
        {
        	customreport.main(null);
            this.dispose();
        }
    }                                     

    private void jButton1KeyPressed(java.awt.event.KeyEvent evt) {                                    
    	if(evt.getKeyCode() == KeyEvent.VK_BACK_SPACE)
        {
    		customreport.main(null);
            this.dispose();
        }else if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
        	if(temp == "In Stock")
            {
             header = new MessageFormat("Custom Transaction Report of In Stock List From "+fromdate+" To "+todate  );
            }
            else
            {
             header = new MessageFormat("Custom Transaction Report of Sold Out List From "+fromdate+" To "+todate);   
            }
                 MessageFormat footer = new MessageFormat("Page{0,number,integer}");
             try {
                 jTable1.print(JTable.PrintMode.FIT_WIDTH, header, footer);
             } catch (PrinterException ex) {
                 Logger.getLogger(instocklist.class.getName()).log(Level.SEVERE, null, ex);
             }
        }
    }                                   

    private void jButton2KeyPressed(java.awt.event.KeyEvent evt) {                                    
    	if(evt.getKeyCode() == KeyEvent.VK_BACK_SPACE)
        {
    		customreport.main(null);
            this.dispose();
        }else if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
        	customreport.main(null);
            this.dispose();
        }
        
    }                                   

    /**
     * @param args the command line arguments
     */
    public static void main(Date frmdate,Date enddate) {
        fromdate = frmdate;
        todate = enddate;
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(customreportresult.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(customreportresult.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(customreportresult.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(customreportresult.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new customreportresult().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private JLabel lblNewLabel;
    private JComboBox comboBox;
    private JLabel lblTotalWeight;
    private JTextField textField;
}
