
import java.awt.print.PrinterException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.MessageFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import net.proteanit.sql.DbUtils;
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import javax.swing.JLabel;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.JComboBox;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JTextField;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author NirmalGds
 */
public class todaysreport extends javax.swing.JFrame {
String temp;
MessageFormat header;
JComboBox comboBox;
    /**
     * Creates new form todaysreport
     */
    
    public todaysreport() {
    	setTitle("ITEMIZATION - Today's Transaction Report");
    	setIconImage(Toolkit.getDefaultToolkit().getImage(todaysreport.class.getResource("/images/itemization_logo.png")));
    	getContentPane().setBackground(new Color(176, 224, 230));
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jScrollPane1.setEnabled(false);
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setEnabled(false);
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Print");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jButton1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton1KeyPressed(evt);
            }
        });

        jButton2.setText("Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jButton2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton2KeyPressed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "In Stock", "Sold Out" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jComboBox1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBox1KeyPressed(evt);
            }
        });

        jLabel1.setText("From");
        
        JLabel lblItemType = new JLabel("Item Type");
        
        comboBox = new JComboBox<String>();
        comboBox.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent arg0) {
        		if(comboBox.getSelectedItem().toString() == "All" && jComboBox1.getSelectedItem().toString() == "In Stock")
        		{
        			try {
						Class.forName("com.mysql.jdbc.Driver");
						Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/gdlashmi?useSSL=false","root","");
						PreparedStatement pst = conn.prepareStatement("SELECT `id` AS ID, `product_name` AS PRODUCT, `Purity` AS PURITY, `location` AS LOCATION, `gross_weight` AS `GROSS WEIGHT`, date(`date&time`) AS `CREATED ON` FROM `stocklist` WHERE date(`date&time`) = CURRENT_DATE and flag = 1");
						PreparedStatement pst1 = conn.prepareStatement("Select sum(gross_weight) from stocklist WHERE date(`date&time`) = CURRENT_DATE and flag = 1");
						ResultSet rs= pst.executeQuery();
						ResultSet rs1=pst1.executeQuery();
						if(rs!=null)
						{
							jTable1.setModel(DbUtils.resultSetToTableModel(rs));
						}
						if(rs1.next())
						{
							textField.setText(String.valueOf(rs1.getDouble(1)));
						}
					}catch (Exception e) {
						
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
        			
        		}else if(comboBox.getSelectedItem().toString() == "Gold" && jComboBox1.getSelectedItem().toString() == "In Stock")
				{
        			try {
						Class.forName("com.mysql.jdbc.Driver");
						Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/gdlashmi?useSSL=false","root","");
						PreparedStatement pst = conn.prepareStatement("SELECT `id` AS ID, `product_name` AS PRODUCT, `Purity` AS PURITY, `location` AS LOCATION, `gross_weight` AS `GROSS WEIGHT`, date(`date&time`) AS `CREATED ON` FROM `stocklist` WHERE date(`date&time`) = CURRENT_DATE and flag = 1 and (Purity = \"Regular\" OR Purity = \"KDM\" )");
						PreparedStatement pst1 = conn.prepareStatement("Select sum(gross_weight) from stocklist WHERE date(`date&time`) = CURRENT_DATE and flag = 1 and (Purity = \"Regular\" OR Purity = \"KDM\" )");
						ResultSet rs= pst.executeQuery();
						ResultSet rs1=pst1.executeQuery();
						if(rs!=null)
						{
							jTable1.setModel(DbUtils.resultSetToTableModel(rs));
						}
						if(rs1.next())
						{
							textField.setText(String.valueOf(rs1.getDouble(1)));
						}
					}catch (Exception e) {
						
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}else if(comboBox.getSelectedItem().toString() == "Silver" && jComboBox1.getSelectedItem().toString() == "In Stock")
				{
					try {
						Class.forName("com.mysql.jdbc.Driver");
						Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/gdlashmi?useSSL=false","root","");
						PreparedStatement pst = conn.prepareStatement("SELECT `id` AS ID, `product_name` AS PRODUCT, `Purity` AS PURITY, `location` AS LOCATION, `gross_weight` AS `GROSS WEIGHT`, date(`date&time`) AS `CREATED ON` FROM `stocklist` WHERE date(`date&time`) = CURRENT_DATE and flag = 1 and (Purity = \"Silver\" OR Purity = \"92M-Silver\" )");
						PreparedStatement pst1 = conn.prepareStatement("Select sum(gross_weight) from stocklist WHERE date(`date&time`) = CURRENT_DATE and flag = 1 and (Purity = \"Silver\" OR Purity = \"92M-Silver\")");
						ResultSet rs= pst.executeQuery();
						ResultSet rs1=pst1.executeQuery();
						if(rs!=null)
						{
							jTable1.setModel(DbUtils.resultSetToTableModel(rs));
						}
						if(rs1.next())
						{
							textField.setText(String.valueOf(rs1.getDouble(1)));
						}
					}catch (Exception e) {
						
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}else if(comboBox.getSelectedItem().toString() == "All" && jComboBox1.getSelectedItem().toString() == "Sold Out")
        		{
        			try {
						Class.forName("com.mysql.jdbc.Driver");
						Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/gdlashmi?useSSL=false","root","");
						PreparedStatement pst = conn.prepareStatement("SELECT `stocklist`.`id` AS ID, `stocklist`.`product_name` AS name,`stocklist`.`Purity` AS Purity,`stocklist`.`location` AS LOCATION,`stocklist`.`gross_weight` AS `GROSS WEIGHT`, date(`stocklist`.`date&time`) AS `ENTRY CREATED ON`,date(`soldoutdate`.`sold date`) AS `SOLD ON` FROM stocklist JOIN soldoutdate ON stocklist.id = soldoutdate.id WHERE date(`date&time`) = CURRENT_DATE and flag = 0");
						PreparedStatement pst1 = conn.prepareStatement("Select sum(gross_weight) from stocklist WHERE date(`date&time`) = CURRENT_DATE and flag = 0");
						ResultSet rs= pst.executeQuery();
						ResultSet rs1=pst1.executeQuery();
						if(rs!=null)
						{
							jTable1.setModel(DbUtils.resultSetToTableModel(rs));
						}
						if(rs1.next())
						{
							textField.setText(String.valueOf(rs1.getDouble(1)));
						}
					}catch (Exception e) {
						
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
        			
        		}else if(comboBox.getSelectedItem().toString() == "Gold" && jComboBox1.getSelectedItem().toString() == "Sold Out")
				{
        			try {
						Class.forName("com.mysql.jdbc.Driver");
						Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/gdlashmi?useSSL=false","root","");
						PreparedStatement pst = conn.prepareStatement("SELECT `stocklist`.`id` AS ID, `stocklist`.`product_name` AS name,`stocklist`.`Purity` AS Purity,`stocklist`.`location` AS LOCATION,`stocklist`.`gross_weight` AS `GROSS WEIGHT`, date(`stocklist`.`date&time`) AS `ENTRY CREATED ON`,date(`soldoutdate`.`sold date`) AS `SOLD ON` FROM stocklist JOIN soldoutdate ON stocklist.id = soldoutdate.id WHERE date(`date&time`) = CURRENT_DATE and flag = 0 and (Purity = \"Regular\" OR Purity = \"KDM\" )");
						PreparedStatement pst1 = conn.prepareStatement("Select sum(gross_weight) from stocklist WHERE date(`date&time`) = CURRENT_DATE and flag = 0 and (Purity = \"Regular\" OR Purity = \"KDM\" )");
						ResultSet rs= pst.executeQuery();
						ResultSet rs1= pst1.executeQuery();
						if(rs!=null)
						{
							jTable1.setModel(DbUtils.resultSetToTableModel(rs));
						}
						if(rs1.next())
						{
							textField.setText(String.valueOf(rs1.getDouble(1)));
						}
					}catch (Exception e) {
						
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}else if(comboBox.getSelectedItem().toString() == "Silver" && jComboBox1.getSelectedItem().toString() == "Sold Out")
				{
					try {
						Class.forName("com.mysql.jdbc.Driver");
						Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/gdlashmi?useSSL=false","root","");
						PreparedStatement pst = conn.prepareStatement("SELECT `stocklist`.`id` AS ID, `stocklist`.`product_name` AS name,`stocklist`.`Purity` AS Purity,`stocklist`.`location` AS LOCATION,`stocklist`.`gross_weight` AS `GROSS WEIGHT`, date(`stocklist`.`date&time`) AS `ENTRY CREATED ON`,date(`soldoutdate`.`sold date`) AS `SOLD ON` FROM stocklist JOIN soldoutdate ON stocklist.id = soldoutdate.id WHERE date(`date&time`) = CURRENT_DATE and flag = 0 and (Purity = \"Silver\" OR Purity = \"92M-Silver\" )");
						PreparedStatement pst1 = conn.prepareStatement("Select sum(gross_weight) from stocklist WHERE date(`date&time`) = CURRENT_DATE and flag = 0 and (Purity = \"Silver\" OR Purity = \"92M-Silver\" )");
						ResultSet rs= pst.executeQuery();
						ResultSet rs1=pst1.executeQuery();
						if(rs!=null)
						{
							jTable1.setModel(DbUtils.resultSetToTableModel(rs));
						}
						if(rs1.next())
						{
							textField.setText(String.valueOf(rs1.getDouble(1)));
						}
					}catch (Exception e) {
						
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
        	}
        });
        comboBox.setModel(new DefaultComboBoxModel<String>(new String[] {"None", "All", "Gold", "Silver"}));
        
        lblTotalWeight = new JLabel("Total Weight");
        
        textField = new JTextField();
        textField.setEditable(false);
        textField.setColumns(10);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createSequentialGroup()
        					.addGap(288)
        					.addComponent(jButton1)
        					.addGap(157)
        					.addComponent(jButton2)
        					.addGap(119)
        					.addComponent(textField, GroupLayout.PREFERRED_SIZE, 122, GroupLayout.PREFERRED_SIZE))
        				.addGroup(layout.createSequentialGroup()
        					.addGap(35)
        					.addComponent(jLabel1)
        					.addGap(89)
        					.addComponent(jComboBox1, GroupLayout.PREFERRED_SIZE, 87, GroupLayout.PREFERRED_SIZE)
        					.addGap(83)
        					.addComponent(lblItemType)
        					.addGap(54)
        					.addComponent(comboBox, GroupLayout.PREFERRED_SIZE, 97, GroupLayout.PREFERRED_SIZE))
        				.addGroup(layout.createSequentialGroup()
        					.addContainerGap()
        					.addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 918, GroupLayout.PREFERRED_SIZE)))
        			.addContainerGap())
        		.addGroup(Alignment.TRAILING, layout.createSequentialGroup()
        			.addContainerGap(595, Short.MAX_VALUE)
        			.addComponent(lblTotalWeight)
        			.addGap(297))
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jLabel1)
        				.addComponent(jComboBox1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(lblItemType)
        				.addComponent(comboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE)
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createSequentialGroup()
        					.addPreferredGap(ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
        					.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(jButton1)
        						.addComponent(jButton2))
        					.addContainerGap())
        				.addGroup(layout.createSequentialGroup()
        					.addPreferredGap(ComponentPlacement.UNRELATED)
        					.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(lblTotalWeight)
        						.addComponent(textField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        					.addContainerGap())))
        );
        getContentPane().setLayout(layout);

        pack();
    }// </editor-fold>                        

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        if(temp == "In Stock")
       {
        header = new MessageFormat("Today's In Stock Transaction Report");
       }
       else
       {
        header = new MessageFormat("Today's Sold Out Transaction Report");   
       }
            MessageFormat footer = new MessageFormat("Page{0,number,integer}");
        try {
            jTable1.print(JTable.PrintMode.FIT_WIDTH, header, footer);
        } catch (PrinterException ex) {
            Logger.getLogger(instocklist.class.getName()).log(Level.SEVERE, null, ex);
        }
    }                                        

    private void jButton1KeyPressed(java.awt.event.KeyEvent evt) {                                    
    	if(evt.getKeyCode() == KeyEvent.VK_ENTER)
    	{
    		if(temp == "In Stock")
    	       {
    	        header = new MessageFormat("Today's In Stock Transaction Report");
    	       }
    	       else
    	       {
    	        header = new MessageFormat("Today's Sold Out Transaction Report");   
    	       }
    	            MessageFormat footer = new MessageFormat("Page{0,number,integer}");
    	        try {
    	            jTable1.print(JTable.PrintMode.FIT_WIDTH, header, footer);
    	        } catch (PrinterException ex) {
    	            Logger.getLogger(instocklist.class.getName()).log(Level.SEVERE, null, ex);
    	        }
    	}else if(evt.getKeyCode() == KeyEvent.VK_BACK_SPACE)
    	{
    		transaction.main(null);
    		this.dispose();
    	}
    }                                   

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
    	transaction.main(null);
		this.dispose();
    }                                        

    private void jButton2KeyPressed(java.awt.event.KeyEvent evt) {                                    
    	if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        	{
        		transaction.main(null);
        		this.dispose();
        	    
        	}else if(evt.getKeyCode() == KeyEvent.VK_BACK_SPACE)
        	{
        		HomePage.main(null);
        		this.dispose();
        	}
    }                                   

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {                                           
    	if(comboBox.getSelectedItem().toString() == "All" && jComboBox1.getSelectedItem().toString() == "In Stock")
		{
			try {
				Class.forName("com.mysql.jdbc.Driver");
				Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/gdlashmi?useSSL=false","root","");
				PreparedStatement pst = conn.prepareStatement("SELECT `id` AS ID, `product_name` AS PRODUCT, `Purity` AS PURITY, `location` AS LOCATION, `gross_weight` AS `GROSS WEIGHT`, date(`date&time`) AS `CREATED ON` FROM `stocklist` WHERE date(`date&time`) = CURRENT_DATE and flag = 1");
				PreparedStatement pst1 = conn.prepareStatement("Select sum(gross_weight) from stocklist WHERE date(`date&time`) = CURRENT_DATE and flag = 1");
				ResultSet rs= pst.executeQuery();
				ResultSet rs1=pst1.executeQuery();
				if(rs!=null)
				{
					jTable1.setModel(DbUtils.resultSetToTableModel(rs));
				}
				if(rs1.next())
				{
					textField.setText(String.valueOf(rs1.getDouble(1)));
				}
			}catch (Exception e) {
				
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
		}else if(comboBox.getSelectedItem().toString() == "Gold" && jComboBox1.getSelectedItem().toString() == "In Stock")
		{
			try {
				Class.forName("com.mysql.jdbc.Driver");
				Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/gdlashmi?useSSL=false","root","");
				PreparedStatement pst = conn.prepareStatement("SELECT `id` AS ID, `product_name` AS PRODUCT, `Purity` AS PURITY, `location` AS LOCATION, `gross_weight` AS `GROSS WEIGHT`, date(`date&time`) AS `CREATED ON` FROM `stocklist` WHERE date(`date&time`) = CURRENT_DATE and flag = 1 and (Purity = \"Regular\" OR Purity = \"KDM\" )");
				PreparedStatement pst1 = conn.prepareStatement("Select sum(gross_weight) from stocklist WHERE date(`date&time`) = CURRENT_DATE and flag = 1 and (Purity = \"Regular\" OR Purity = \"KDM\" )");
				ResultSet rs= pst.executeQuery();
				ResultSet rs1=pst1.executeQuery();
				if(rs!=null)
				{
					jTable1.setModel(DbUtils.resultSetToTableModel(rs));
				}
				if(rs1.next())
				{
					textField.setText(String.valueOf(rs1.getDouble(1)));
				}
			}catch (Exception e) {
				
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}else if(comboBox.getSelectedItem().toString() == "Silver" && jComboBox1.getSelectedItem().toString() == "In Stock")
		{
			try {
				Class.forName("com.mysql.jdbc.Driver");
				Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/gdlashmi?useSSL=false","root","");
				PreparedStatement pst = conn.prepareStatement("SELECT `id` AS ID, `product_name` AS PRODUCT, `Purity` AS PURITY, `location` AS LOCATION, `gross_weight` AS `GROSS WEIGHT`, date(`date&time`) AS `CREATED ON` FROM `stocklist` WHERE date(`date&time`) = CURRENT_DATE and flag = 1 and (Purity = \"Silver\" OR Purity = \"92M-Silver\" )");
				PreparedStatement pst1 = conn.prepareStatement("Select sum(gross_weight) from stocklist WHERE date(`date&time`) = CURRENT_DATE and flag = 1 and (Purity = \"Silver\" OR Purity = \"92M-Silver\")");
				ResultSet rs= pst.executeQuery();
				ResultSet rs1=pst1.executeQuery();
				if(rs!=null)
				{
					jTable1.setModel(DbUtils.resultSetToTableModel(rs));
				}
				if(rs1.next())
				{
					textField.setText(String.valueOf(rs1.getDouble(1)));
				}
			}catch (Exception e) {
				
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}else if(comboBox.getSelectedItem().toString() == "All" && jComboBox1.getSelectedItem().toString() == "Sold Out")
		{
			try {
				Class.forName("com.mysql.jdbc.Driver");
				Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/gdlashmi?useSSL=false","root","");
				PreparedStatement pst = conn.prepareStatement("SELECT `stocklist`.`id` AS ID, `stocklist`.`product_name` AS name,`stocklist`.`Purity` AS Purity,`stocklist`.`location` AS LOCATION,`stocklist`.`gross_weight` AS `GROSS WEIGHT`, date(`stocklist`.`date&time`) AS `ENTRY CREATED ON`,date(`soldoutdate`.`sold date`) AS `SOLD ON` FROM stocklist JOIN soldoutdate ON stocklist.id = soldoutdate.id WHERE date(`date&time`) = CURRENT_DATE and flag = 0");
				PreparedStatement pst1 = conn.prepareStatement("Select sum(gross_weight) from stocklist WHERE date(`date&time`) = CURRENT_DATE and flag = 0");
				ResultSet rs= pst.executeQuery();
				ResultSet rs1=pst1.executeQuery();
				if(rs!=null)
				{
					jTable1.setModel(DbUtils.resultSetToTableModel(rs));
				}
				if(rs1.next())
				{
					textField.setText(String.valueOf(rs1.getDouble(1)));
				}
			}catch (Exception e) {
				
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
		}else if(comboBox.getSelectedItem().toString() == "Gold" && jComboBox1.getSelectedItem().toString() == "Sold Out")
		{
			try {
				Class.forName("com.mysql.jdbc.Driver");
				Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/gdlashmi?useSSL=false","root","");
				PreparedStatement pst = conn.prepareStatement("SELECT `stocklist`.`id` AS ID, `stocklist`.`product_name` AS name,`stocklist`.`Purity` AS Purity,`stocklist`.`location` AS LOCATION,`stocklist`.`gross_weight` AS `GROSS WEIGHT`, date(`stocklist`.`date&time`) AS `ENTRY CREATED ON`,date(`soldoutdate`.`sold date`) AS `SOLD ON` FROM stocklist JOIN soldoutdate ON stocklist.id = soldoutdate.id WHERE date(`date&time`) = CURRENT_DATE and flag = 0 and (Purity = \"Regular\" OR Purity = \"KDM\" )");
				PreparedStatement pst1 = conn.prepareStatement("Select sum(gross_weight) from stocklist WHERE date(`date&time`) = CURRENT_DATE and flag = 0 and (Purity = \"Regular\" OR Purity = \"KDM\" )");
				ResultSet rs= pst.executeQuery();
				ResultSet rs1= pst1.executeQuery();
				if(rs!=null)
				{
					jTable1.setModel(DbUtils.resultSetToTableModel(rs));
				}
				if(rs1.next())
				{
					textField.setText(String.valueOf(rs1.getDouble(1)));
				}
			}catch (Exception e) {
				
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}else if(comboBox.getSelectedItem().toString() == "Silver" && jComboBox1.getSelectedItem().toString() == "Sold Out")
		{
			try {
				Class.forName("com.mysql.jdbc.Driver");
				Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/gdlashmi?useSSL=false","root","");
				PreparedStatement pst = conn.prepareStatement("SELECT `stocklist`.`id` AS ID, `stocklist`.`product_name` AS name,`stocklist`.`Purity` AS Purity,`stocklist`.`location` AS LOCATION,`stocklist`.`gross_weight` AS `GROSS WEIGHT`, date(`stocklist`.`date&time`) AS `ENTRY CREATED ON`,date(`soldoutdate`.`sold date`) AS `SOLD ON` FROM stocklist JOIN soldoutdate ON stocklist.id = soldoutdate.id WHERE date(`date&time`) = CURRENT_DATE and flag = 0 and (Purity = \"Silver\" OR Purity = \"92M-Silver\" )");
				PreparedStatement pst1 = conn.prepareStatement("Select sum(gross_weight) from stocklist WHERE date(`date&time`) = CURRENT_DATE and flag = 0 and (Purity = \"Silver\" OR Purity = \"92M-Silver\" )");
				ResultSet rs= pst.executeQuery();
				ResultSet rs1=pst1.executeQuery();
				if(rs!=null)
				{
					jTable1.setModel(DbUtils.resultSetToTableModel(rs));
				}
				if(rs1.next())
				{
					textField.setText(String.valueOf(rs1.getDouble(1)));
				}
			}catch (Exception e) {
				
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
    }                                          

    private void jComboBox1KeyPressed(java.awt.event.KeyEvent evt) {                                      
        if(evt.getKeyCode() == KeyEvent.VK_BACK_SPACE)
        {
        	transaction.main(null);
        	this.dispose();
        }
    }                                     

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(todaysreport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(todaysreport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(todaysreport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(todaysreport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new todaysreport().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private JLabel lblTotalWeight;
    private JTextField textField;
}