
import java.awt.event.KeyEvent;
import java.awt.print.PrinterException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.MessageFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import net.proteanit.sql.DbUtils;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.DefaultComboBoxModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author NirmalGds
 */
public class searchbysilverpurity extends javax.swing.JFrame {
    MessageFormat header;
    String purity = null;
    String from = null;
    /**
     * Creates new form searchbypurity
     */
    public searchbysilverpurity() {
    	setIconImage(Toolkit.getDefaultToolkit().getImage(searchbysilverpurity.class.getResource("/images/itemization_logo.png")));
    	setTitle("ITEMIZATION - Search by Purity (Silver)");
    	getContentPane().setBackground(new Color(176, 224, 230));
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
                
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jScrollPane1.setEnabled(false);
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Filter By");

        jComboBox1.setModel(new DefaultComboBoxModel(new String[] {"None", "Silver", "92M-Silver"}));
        jComboBox1.setAutoscrolls(true);
        jComboBox1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jComboBox1.setEditor(null);
        jComboBox1.setKeySelectionManager(null);
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jComboBox1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBox1KeyPressed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setEnabled(false);
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Print");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jButton1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton1KeyPressed(evt);
            }
        });

        jButton2.setText("Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jButton2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton2KeyPressed(evt);
            }
        });

        jComboBox2.setModel(new DefaultComboBoxModel(new String[] {"None", "In Stock", "Sold Out"}));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });
        jComboBox2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBox2KeyPressed(evt);
            }
        });

        jLabel2.setText("From");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(211, 211, 211)
                        .addComponent(jButton1)
                        .addGap(133, 133, 133)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 646, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(42, 42, 42)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(80, 80, 80)
                                .addComponent(jLabel2)
                                .addGap(54, 54, 54)
                                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        searchbypuritynavi.main(null);
    	this.dispose();
    }                                        

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {                                           
       purity = jComboBox1.getSelectedItem().toString();
       if(purity.length() != 0 && from.length() != 0)
       {
       	if(from == "In Stock")
       	{
       	try{
               Class.forName("com.mysql.jdbc.Driver");
               Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/gdlashmi?useSSL=false","root","");
               PreparedStatement pst = conn.prepareStatement("SELECT `id` as ID, `product_name` as PRODUCT, `Purity` as PURITY, `location` as LOCATION, `gross_weight` as `GROSS WEIGHT`, date(`date&time`) as `CREATED ON` FROM `stocklist` WHERE Purity = ? and flag =1");
               pst.setString(1, purity);
               ResultSet rs = pst.executeQuery();
               if(rs != null)
               {
                  jTable1.setModel(DbUtils.resultSetToTableModel(rs));
               }
               }
               catch (Exception e)
               {
                   e.printStackTrace();
               }
       	}else if(from == "Sold Out")
       	{
       		try{
                   Class.forName("com.mysql.jdbc.Driver");
                   Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/gdlashmi?useSSL=false","root","");
                   PreparedStatement pst = conn.prepareStatement("SELECT `id` as ID, `product_name` as PRODUCT, `Purity` as PURITY, `location` as LOCATION, `gross_weight` as `GROSS WEIGHT`, date(`date&time`) as `CREATED ON` FROM `stocklist` WHERE Purity = ? and flag =0");
                   pst.setString(1, purity);
                   ResultSet rs = pst.executeQuery();
                   if(rs != null)
                   {
                      jTable1.setModel(DbUtils.resultSetToTableModel(rs));
                   }
                   }
                   catch (Exception e)
                   {
                       e.printStackTrace();
                   }
       	}
       }
     }                                          

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
       if(purity == "Regular" && from== "In Stock")
       {
        header = new MessageFormat("List by 916 Purity from In Stock List");
       }
       else if(purity == "Regular" && from== "Sold Out")
       {
    	   header = new MessageFormat("List by 916 Purity from Sold Out List");
       }else if(purity == "KDM" && from== "In Stock")
       { 
        header = new MessageFormat("List by KDM Purity from In Stock List");   
       }else if(purity == "KDM" && from== "Sold Out")
       {
    	   header = new MessageFormat("List by KDM Purity from Sold Out List");
       }
            MessageFormat footer = new MessageFormat("Page{0,number,integer}");
        try {
            jTable1.print(JTable.PrintMode.FIT_WIDTH, header, footer);
        } catch (PrinterException ex) {
            Logger.getLogger(instocklist.class.getName()).log(Level.SEVERE, null, ex);
        }
    }                                        

    private void jButton2KeyPressed(java.awt.event.KeyEvent evt) {                                    
    	 if(evt.getKeyCode() == KeyEvent.VK_ENTER)
    	 {
    		 searchbypuritynavi.main(null);
      	   this.dispose();
    	 }else if(evt.getKeyCode() == KeyEvent.VK_BACK_SPACE)
         {
    		 searchbypuritynavi.main(null);
      	   this.dispose();
         }
    }                                   

    private void jButton1KeyPressed(java.awt.event.KeyEvent evt) {                                    
       if(evt.getKeyCode() == KeyEvent.VK_ENTER)
       {
    	   if(purity == "Regular" && from== "In Stock")
           {
            header = new MessageFormat("List by 916 Purity from In Stock List");
           }
           else if(purity == "Regular" && from== "Sold Out")
           {
        	   header = new MessageFormat("List by 916 Purity from Sold Out List");
           }else if(purity == "KDM" && from== "In Stock")
           { 
            header = new MessageFormat("List by KDM Purity from In Stock List");   
           }else if(purity == "KDM" && from== "Sold Out")
           {
        	   header = new MessageFormat("List by KDM Purity from Sold Out List");
           }
                MessageFormat footer = new MessageFormat("Page{0,number,integer}");
            try {
                jTable1.print(JTable.PrintMode.FIT_WIDTH, header, footer);
            } catch (PrinterException ex) {
                Logger.getLogger(instocklist.class.getName()).log(Level.SEVERE, null, ex);
            }
       }else if(evt.getKeyCode() == KeyEvent.VK_BACK_SPACE)
       {
    	   searchbypuritynavi.main(null);
    	   this.dispose();
       }
    }                                   

    private void jComboBox2KeyPressed(java.awt.event.KeyEvent evt) {                                      
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
        	if(purity.length() != 0 && from.length() != 0)
            {
            	if(from == "In Stock")
            	{
            	try{
                    Class.forName("com.mysql.jdbc.Driver");
                    Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/gdlashmi?useSSL=false","root","");
                    PreparedStatement pst = conn.prepareStatement("SELECT `id` as ID, `product_name` as PRODUCT, `Purity` as PURITY, `location` as LOCATION, `gross_weight` as `GROSS WEIGHT`, date(`date&time`) as `CREATED ON` FROM `stocklist` WHERE Purity = ? and flag =1");
                    pst.setString(1, purity);
                    ResultSet rs = pst.executeQuery();
                    if(rs != null)
                    {
                       jTable1.setModel(DbUtils.resultSetToTableModel(rs));
                    }
                    }
                    catch (Exception e)
                    {
                        e.printStackTrace();
                    }
            	}else if(from == "Sold Out")
            	{
            		try{
                        Class.forName("com.mysql.jdbc.Driver");
                        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/gdlashmi?useSSL=false","root","");
                        PreparedStatement pst = conn.prepareStatement("SELECT `id` as ID, `product_name` as PRODUCT, `Purity` as PURITY, `location` as LOCATION, `gross_weight` as `GROSS WEIGHT`, date(`date&time`) as `CREATED ON` FROM `stocklist` WHERE Purity = ? and flag =0");
                        pst.setString(1, purity);
                        ResultSet rs = pst.executeQuery();
                        if(rs != null)
                        {
                           jTable1.setModel(DbUtils.resultSetToTableModel(rs));
                        }
                        }
                        catch (Exception e)
                        {
                            e.printStackTrace();
                        }
            	}
            }
        }else if(evt.getKeyCode() == KeyEvent.VK_BACK_SPACE)
        {
        	searchbypuritynavi.main(null);
        	this.dispose();
        }
    }                                     

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        from = jComboBox2.getSelectedItem().toString();
        if(purity.length() != 0 && from.length() != 0)
        {
        	if(from == "In Stock")
        	{
        	try{
                Class.forName("com.mysql.jdbc.Driver");
                Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/gdlashmi?useSSL=false","root","");
                PreparedStatement pst = conn.prepareStatement("SELECT `id` as ID, `product_name` as PRODUCT, `Purity` as PURITY, `location` as LOCATION, `gross_weight` as `GROSS WEIGHT`, date(`date&time`) as `CREATED ON` FROM `stocklist` WHERE Purity = ? and flag =1");
                pst.setString(1, purity);
                ResultSet rs = pst.executeQuery();
                if(rs != null)
                {
                   jTable1.setModel(DbUtils.resultSetToTableModel(rs));
                }
                }
                catch (Exception e)
                {
                    e.printStackTrace();
                }
        	}else if(from == "Sold Out")
        	{
        		try{
                    Class.forName("com.mysql.jdbc.Driver");
                    Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/gdlashmi?useSSL=false","root","");
                    PreparedStatement pst = conn.prepareStatement("SELECT `id` as ID, `product_name` as PRODUCT, `Purity` as PURITY, `location` as LOCATION, `gross_weight` as `GROSS WEIGHT`, date(`date&time`) as `CREATED ON` FROM `stocklist` WHERE Purity = ? and flag =0");
                    pst.setString(1, purity);
                    ResultSet rs = pst.executeQuery();
                    if(rs != null)
                    {
                       jTable1.setModel(DbUtils.resultSetToTableModel(rs));
                    }
                    }
                    catch (Exception e)
                    {
                        e.printStackTrace();
                    }
        	}
        }
                	
    }   
    private void jComboBox1KeyPressed(java.awt.event.KeyEvent evt) {                                      
    	if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
    		 if(purity.length() != 0 && from.length() != 0)
            {
            	if(from == "In Stock")
            	{
            	try{
                    Class.forName("com.mysql.jdbc.Driver");
                    Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/gdlashmi?useSSL=false","root","");
                    PreparedStatement pst = conn.prepareStatement("SELECT `id` as ID, `product_name` as PRODUCT, `Purity` as PURITY, `location` as LOCATION, `gross_weight` as `GROSS WEIGHT`, date(`date&time`) as `CREATED ON` FROM `stocklist` WHERE Purity = ? and flag =1");
                    pst.setString(1, purity);
                    ResultSet rs = pst.executeQuery();
                    if(rs != null)
                    {
                       jTable1.setModel(DbUtils.resultSetToTableModel(rs));
                    }
                    }
                    catch (Exception e)
                    {
                        e.printStackTrace();
                    }
            	}else if(from == "Sold Out")
            	{
            		try{
                        Class.forName("com.mysql.jdbc.Driver");
                        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/gdlashmi?useSSL=false","root","");
                        PreparedStatement pst = conn.prepareStatement("SELECT `id` as ID, `product_name` as PRODUCT, `Purity` as PURITY, `location` as LOCATION, `gross_weight` as `GROSS WEIGHT`, date(`date&time`) as `CREATED ON` FROM `stocklist` WHERE Purity = ? and flag =0");
                        pst.setString(1, purity);
                        ResultSet rs = pst.executeQuery();
                        if(rs != null)
                        {
                           jTable1.setModel(DbUtils.resultSetToTableModel(rs));
                        }
                        }
                        catch (Exception e)
                        {
                            e.printStackTrace();
                        }
            	}
            }
        }else if(evt.getKeyCode() == KeyEvent.VK_BACK_SPACE)
        {
        	searchbypuritynavi.main(null);
        	this.dispose();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(searchbysilverpurity.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(searchbysilverpurity.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(searchbysilverpurity.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(searchbysilverpurity.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new searchbysilverpurity().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration                   
}
